version: 2 # use CircleCI 2.0
jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    environment:
      RACK_ENV: test
      RAILS_ENV: test
      TEST_REPORT_PATH: "circleci-test/reports"
    parallelism: 3 # run three instances of this job in parallel
    docker: # run the steps with Docker
      - image: circleci/ruby:2.5.0-node-browsers # ...with this image as the primary container; this is where all `steps` will run
        environment: # environment variables for primary container
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          PGHOST: 127.0.0.1
          PGUSER: postgres
          RAILS_ENV: test
      - image: circleci/postgres:9.5-alpine # database image
        environment: # environment variables for database
          POSTGRES_USER: postgres
          POSTGRES_DB: codecov_test_test
          POSTGRES_PASSWORD: postgres
    steps: # a collection of executable commands
      - checkout # special step to check out source code to working directory

      # Which version of bundler?
      - run:
          name: Which bundler?
          command: bundle -v

      # Restore bundle cache
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
      - restore_cache:
          keys:
            - rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
            - rails-demo-bundle-v2-

      - run: # Install Ruby dependencies
          name: Bundle Install
          command: bundle check || bundle install

      # Store bundle cache for Ruby dependencies
      - save_cache:
          key: rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      
      # Create required dirs
      - run:
          name: Create required dirs
          command: mkdir -p $TEST_REPORT_PATH

      # Save artifacts
      - type: store_test_results
        path: circleci-test/reports

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      # Database setup
      - run: bundle exec rake db:create --all
      - run: bin/rails db:schema:load
      - run: bin/rails db:migrate

      # Run Rspecs
      - run: 
        name: run and upload rspec reports 
        command: bundle exec rspec spec --format progress -o $TEST_REPORT_PATH/coverage.xml 
        command: bash <(curl -s https://codecov.io/bash)        
      
      # Run Rspecs then Upload reports for each flag
      # - run: bundle exec rspec spec/controllers --format progress -o $TEST_REPORT_PATH/coverage.xml
      # - run: bash <(curl -s https://codecov.io/bash) -F controllers
      # - run: bundle exec rspec spec/models --format progress -o $TEST_REPORT_PATH/coverage.xml
      # - run: bash <(curl -s https://codecov.io/bash) -F models
      # - run: bundle exec rspec spec/helpers --format progress -o $TEST_REPORT_PATH/coverage.xml
      # - run: bash <(curl -s https://codecov.io/bash) -F helpers
      # - run: bundle exec rspec spec/jobs --format progress -o $TEST_REPORT_PATH/coverage.xml
      # - run: bash <(curl -s https://codecov.io/bash) -F jobs
